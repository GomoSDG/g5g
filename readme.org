Project was created to help put together a resource for getting started with ClojureScript UI stuff.

* Requirements.
  In order to run the application you need to make sure that the following are already installed.
  - Java 8 or higher.
  - node.

* Running application.
  To run the application you will have to do the following:
  - Run ~npx shadow-cljs watch app~ to build and run application with watcher.

* Configuring shadow-cljs.
This section explains import build configs.

#+BEGIN_SRC emacs_lips
{:app {:target       :browser
       :output-dir   "public/js" 
       :asset-path   "/js"
       :modules      {:main {:entries [g5g.core]}}


       :devtools     {:repl-init-ns  cljs.user
                      :preloads      []
                      :http-port     8021
                      :http-root     "public"
                      :after-load    g5g.core/init}}}
#+END_SRC

*** :target
    This config explains which platform shadow-cljs should target. If you are building a web-app, you should target browser.

*** :output-dir
    This is the directory that all the transpiled sources will be placed.

*** :assest-path 
    This is the relative path from the webserver's root which will contain content for output-dir.

*** :modules
    A map that configures how compiled sources are bundled together. Each key-value pair explains how a ~.js~ file will be bundled. The key will be the file name. The value is a map that describes the bundle.

    The following keys describe the map that describes the bundle:
    - ~:entries~ the entry namespace e.g. ~g5g.core~
    - ~:init-fn~ fully qualified symbol pointing to a function that should be ran when this module is loaded.
    - for a list of all possible configs check out: https://shadow-cljs.github.io/docs/UsersGuide.html#_modules .

*** :devtools
    This configures development tools supported by the ~:target~ for each build.

    - ~:repl-init-ns~ configures which namespace to start in. The default is ~cljs.user~.
    - ~:repl-pprint~ when set to true, it makes repl use ~cljs.pprint~ instead of ~pr-str~ when printing eval-results
    - ~:preloads~ used to load a set of namespaces before loading the application. Good for hooking in devtools.
    - ~:http-port~ describes the port the server should run int.
    - ~:http-root~ provides the root directory for the server. This is the path for ~/~.
    - ~:after-load~ fully qualified symbol for the function to execute after load. Works well for hot reload.

* Getting Started with Reagent.
To render your html you need to run the function ~reagent.dom/render~ which takes a vector of the
the function to render and the element to render the function on. This is usually
~(.getElementById js/document "app")~ where ~app~ is the id of the element to render in.

For more information go to https://http://reagent-project.github.io/docs/master/reagent.dom.html .

* Understanding Secretary
Secretery is used for routing in single webpage applications. To get started, you will need to get the
~defroute~ macro using ~[secretary.core :as secretary :refer-macros [defroute]]~. You will need to use 
~:refer-macros~ because ~:refer~ does not import macros.

~defroute~ takes parameters ~route name~, ~route matcher~, ~destruct~ and ~route action~.

- ~route name~ is the name of the route e.g. ~home~.
- ~route matcher~ is the path for the route e.g. ~/~.
- ~destruct~ used to get path params from the route. You can always get away with ~{:as params}~.
- ~route action~ the action that should be done when the route is activated.

For more information on destructuring and query-params go to https://github.com/clj-commons/secretary#parameter-destructuring

* Understanding re-frame
~re-frame~ is a state management library. To get started you need to be able ~re-frame.core/dispatch~,
~re-frame.core/reg-sub~ and ~re-frame.core/reg-event-db~.

- ~dispatch~ dispatches an event provided as ~[<id> ...]~.
- ~reg-sub~ registers a subscription name that will get a certain value from db.
- ~reg-event-db~ registers and event handler that will process event and update the db. signature is ~(db event) -> db~.

* Attaching Views to Routes.
A map of panels is kept to keep track of all panels in the app. This map is then added to the db under
key ~:panels~. A key ~:active-panel~ then keeps the key of the active panel. The active panel function
is then retrieved by running ~(@panels @active-panel)~ where ~@panels~ is a subscription to ~:panels~
and ~@active-panel~ is a subscription to ~:active-panel~. The map of panels can be found in ~g5g.views~.

The active panel is set by dispatching the event ~:set-active-panel~ with the key to the panel desired.
This happens in ~g5g.routes~.

* Understanding Gulp
Gulp has many uses. For this project Gulp is used to compile the sass files to css. This session explains all you need to know to get started.

For more information please see .

To get started, make sure that you have ~gulp~ and ~gulp-sass~ installed as dev dependencies in your project. In your project directory, you will need to make sure that there is a file ~gulpfile.js~.
This file will contain all your gulp tasks for your project.

For more information look at the following links:
- https://css-tricks.com/gulp-for-beginners/
- https://gulpjs.com/docs/en/api/series/
- https://gulpjs.com/docs/en/api/watch/
