* Requirements
  In order to run the application you need to make sure that the following are already installed.
  - Java 8 or higher.
  - node

* Running application
  To run the application you will have to do the following:
  - Run ~npx shadow-cljs watch app~ to build and run application with watcher.

* Configuring shadow-cljs
This section explains import build configs.

#+BEGIN_SRC emacs_lips
{:app {:target       :browser
       :output-dir   "public/js" 
       :asset-path   "/js"
       :modules      {:main {:entries [g5g.core]}}


       :devtools     {:repl-init-ns cljs.user
                      :preloads  []
                      :http-port 8021
                      :http-root "public"}}}
#+END_SRC

*** :target
    This config explains which platform shadow-cljs should target. If you are building a web-app, you should target browser.

*** :output-dir
    This is the directory that all the transpiled sources will be placed.

*** :assest-path 
    This is the relative path from the webserver's root which will contain content for output-dir.

*** :modules
    A map that configures how compiled sources are bundled together. Each key-value pair explains how a ~.js~ file will be bundled. The key will be the file name. The value is a map that describes the bundle.

    The following keys describe the map that describes the bundle:
    - ~:entries~ the entry namespace e.g. ~g5g.core~
    - ~:init-fn~ fully qualified symbol pointing to a function that should be ran when this module is loaded.
    - for a list of all possible configs check out: https://shadow-cljs.github.io/docs/UsersGuide.html#_modules .

*** :devtools
    This configures development tools supported by the ~:target~ for each build.

    - ~:repl-init-ns~ configures which namespace to start in. The default is ~cljs.user~.
    - ~:repl-pprint~ when set to true, it makes repl use ~cljs.pprint~ instead of ~pr-str~ when printing eval-results
    - ~:preloads~ used to load a set of namespaces before loading the application. Good for hooking in devtools.
    - ~:http-port~ describes the port the server should run int.
    - ~:http-root~ provides the root directory for the server. This is the path for ~/~.
